name: workflow
# So normally: ON: Main which means whenever we push changes to our main branch, trigger our CICD pipeline. In this case we are not doing 
#that thus having manual control over our pipeline. Only trigger our pipeline when we manually click on workflow dispatch on GitHub. 
on: [workflow_dispatch]

permissions:
  id-token: write
  contents: read

jobs:
  integration:
    name: Continuous Integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Lint code
        run: echo "Linting repository"

      - name: Run unit tests
        run: echo "Running unit tests"

#There are some added things on CD we haven't seen before and this is because we are using GPU via PaperSpace which we will be paying for.
#Paperspace will rent us GPU to train our model so we have to have that GPU ready before going into MT.
  Continuous-Deployment:
    name: Continuous Deployment
    needs: integration
    runs-on: ubuntu-latest
    steps:
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Check Node Version
        run: npm -v
      #Install PaperSpace CLI
      - name: Install Paperspace Cli
        run: npm install -g paperspace-node
      #Once our CLI is installed. Let check the version of PaperSpace
      - name: Test Paperspace Cli
        run: paperspace -version
      #Now start our remote machine which has the GPU in paperspace
      - name: Start a Gpu Instance
        run: paperspace machines start --apiKey ${{ secrets.API_KEY }} --machineId ${{ secrets.MACHINE_ID }}
      #Wait until the machine is teady before starting training. Self Explanatory
      - name: Wait For Instance state to be ready
        run: paperspace machines waitfor --apiKey ${{ secrets.API_KEY }} --machineId ${{ secrets.MACHINE_ID }} --state "ready"
#Now our GPU is ready. Let start training.
  Continuous-Training:
    name: Continuous Training
    needs: Continuous-Deployment
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      #Configure AWS CLI so we can fetch/get our data from our S3 bucket to train our model (Remember the flow above)
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: us-east-1

      - name: Run Training Pipeline
        env:
          #ATLAS_CLUSTER_USERNAME: ${{ secrets.ATLAS_CLUSTER_USERNAME }}
          #ATLAS_CLUSTER_PASSWORD: ${{ secrets.ATLAS_CLUSTER_PASSWORD }}
          DATABASE_USERNAME: ${{ secrets.DATABASE_USERNAME }}
          DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
          ACCESS_KEY_ID: ${{ secrets.ACCESS_KEY_ID }}
          AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
        run: |
          pip3 install -r requirements.txt
          python3 src/pipeline/pipeline.py #Run our training pipeline

      - name: Training Completed
        run: echo "Training Completed"
#Once our training is done. Please turn OFF our remote machine for paperspace which we have ON and clean it up. 
  Clean-Workbench:
    name: Clean Workbench
    needs: Continuous-Training
    runs-on: ubuntu-latest
    steps:
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Install Paperspace Cli
        run: npm install -g paperspace-node

      - name: Stop Running Instance
        run: paperspace machines stop --apiKey ${{ secrets.API_KEY }} --machineId ${{ secrets.MACHINE_ID }}

      - name: Wait For Instance state to be Stopped
        run: paperspace machines waitfor --apiKey ${{ secrets.API_KEY }} --machineId ${{ secrets.MACHINE_ID }} --state "off"

      - name: Job Completed
        run: echo "Completed Training Stage"